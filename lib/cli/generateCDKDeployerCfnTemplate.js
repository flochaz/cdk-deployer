"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCDKStandaloneDeployerCfnTemplate = void 0;
const cdk = require("aws-cdk-lib");
const cdk_standalone_deployer_1 = require("../construct/cdk-standalone-deployer");
const createBuildspecs_1 = require("./createBuildspecs");
async function generateCDKStandaloneDeployerCfnTemplate(options) {
    const deployer = new cdk.App();
    const buildspecs = createBuildspecs_1.createBuildspecs(options);
    const deployerStack = new cdk_standalone_deployer_1.CdkStandaloneDeployer(deployer, {
        githubRepository: options.githubRepoName,
        gitBranch: options.githubRepoBranch,
        cdkAppLocation: options.cdkAppSourceCodeZipName ? '' : options.cdkProjectPath,
        stackName: options.stackName,
        deployBuildSpec: buildspecs.deployBuildspec,
        destroyBuildSpec: buildspecs.destroyBuildspec,
        cdkQualifier: options.cdkQualifier,
        cdkAppSourceCodeZipName: options.cdkAppSourceCodeZipName,
        cdkParameters: options.cdkParameters ? parseCDKParameters(options.cdkParameters) : undefined,
    });
    const synth = deployer.synth();
    return JSON.stringify(synth.getStackArtifact(deployerStack.artifactId).template);
}
exports.generateCDKStandaloneDeployerCfnTemplate = generateCDKStandaloneDeployerCfnTemplate;
function parseCDKParameters(cdkParameters) {
    const result = {};
    for (const cdkParameter of cdkParameters) {
        if (!cdkParameter.includes('=')) {
            throw new Error(`Invalid CDK parameter ${cdkParameter}. It should be in the form of name=value`);
        }
        const [name, value] = cdkParameter.split('=');
        if (!name || !value) {
            throw new Error(`Invalid CDK parameter ${cdkParameter}. It should be in the form of name=value`);
        }
        result[name] = {
            type: 'String',
            default: value,
        };
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVDREtEZXBsb3llckNmblRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaS9nZW5lcmF0ZUNES0RlcGxveWVyQ2ZuVGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLGtGQUE2RTtBQUM3RSx5REFBc0Q7QUFFL0MsS0FBSyxVQUFVLHdDQUF3QyxDQUFDLE9BQVk7SUFDekUsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFL0IsTUFBTSxVQUFVLEdBQUcsbUNBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0MsTUFBTSxhQUFhLEdBQUcsSUFBSSwrQ0FBcUIsQ0FBQyxRQUFRLEVBQUU7UUFDeEQsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLGNBQWM7UUFDeEMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0I7UUFDbkMsY0FBYyxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYztRQUM3RSxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7UUFDNUIsZUFBZSxFQUFFLFVBQVUsQ0FBQyxlQUFlO1FBQzNDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxnQkFBZ0I7UUFDN0MsWUFBWSxFQUFFLE9BQU8sQ0FBQyxZQUFZO1FBQ2xDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyx1QkFBdUI7UUFDeEQsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztLQUM3RixDQUFDLENBQUM7SUFFSCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFL0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkYsQ0FBQztBQW5CRCw0RkFtQkM7QUFDRCxTQUFTLGtCQUFrQixDQUFDLGFBQXVCO0lBQ2pELE1BQU0sTUFBTSxHQUE4QyxFQUFFLENBQUM7SUFDN0QsS0FBSyxNQUFNLFlBQVksSUFBSSxhQUFhLEVBQUU7UUFDeEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsWUFBWSwwQ0FBMEMsQ0FBQyxDQUFDO1NBQ2xHO1FBQ0QsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsWUFBWSwwQ0FBMEMsQ0FBQyxDQUFDO1NBQ2xHO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ2IsSUFBSSxFQUFFLFFBQVE7WUFDZCxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7S0FDSDtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ2RrU3RhbmRhbG9uZURlcGxveWVyIH0gZnJvbSAnLi4vY29uc3RydWN0L2Nkay1zdGFuZGFsb25lLWRlcGxveWVyJztcbmltcG9ydCB7IGNyZWF0ZUJ1aWxkc3BlY3MgfSBmcm9tICcuL2NyZWF0ZUJ1aWxkc3BlY3MnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVDREtTdGFuZGFsb25lRGVwbG95ZXJDZm5UZW1wbGF0ZShvcHRpb25zOiBhbnkpIHtcbiAgY29uc3QgZGVwbG95ZXIgPSBuZXcgY2RrLkFwcCgpO1xuXG4gIGNvbnN0IGJ1aWxkc3BlY3MgPSBjcmVhdGVCdWlsZHNwZWNzKG9wdGlvbnMpO1xuICBjb25zdCBkZXBsb3llclN0YWNrID0gbmV3IENka1N0YW5kYWxvbmVEZXBsb3llcihkZXBsb3llciwge1xuICAgIGdpdGh1YlJlcG9zaXRvcnk6IG9wdGlvbnMuZ2l0aHViUmVwb05hbWUsXG4gICAgZ2l0QnJhbmNoOiBvcHRpb25zLmdpdGh1YlJlcG9CcmFuY2gsXG4gICAgY2RrQXBwTG9jYXRpb246IG9wdGlvbnMuY2RrQXBwU291cmNlQ29kZVppcE5hbWUgPyAnJyA6IG9wdGlvbnMuY2RrUHJvamVjdFBhdGgsXG4gICAgc3RhY2tOYW1lOiBvcHRpb25zLnN0YWNrTmFtZSxcbiAgICBkZXBsb3lCdWlsZFNwZWM6IGJ1aWxkc3BlY3MuZGVwbG95QnVpbGRzcGVjLFxuICAgIGRlc3Ryb3lCdWlsZFNwZWM6IGJ1aWxkc3BlY3MuZGVzdHJveUJ1aWxkc3BlYyxcbiAgICBjZGtRdWFsaWZpZXI6IG9wdGlvbnMuY2RrUXVhbGlmaWVyLFxuICAgIGNka0FwcFNvdXJjZUNvZGVaaXBOYW1lOiBvcHRpb25zLmNka0FwcFNvdXJjZUNvZGVaaXBOYW1lLFxuICAgIGNka1BhcmFtZXRlcnM6IG9wdGlvbnMuY2RrUGFyYW1ldGVycyA/IHBhcnNlQ0RLUGFyYW1ldGVycyhvcHRpb25zLmNka1BhcmFtZXRlcnMpIDogdW5kZWZpbmVkLFxuICB9KTtcblxuICBjb25zdCBzeW50aCA9IGRlcGxveWVyLnN5bnRoKCk7XG5cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN5bnRoLmdldFN0YWNrQXJ0aWZhY3QoZGVwbG95ZXJTdGFjay5hcnRpZmFjdElkKS50ZW1wbGF0ZSk7XG59XG5mdW5jdGlvbiBwYXJzZUNES1BhcmFtZXRlcnMoY2RrUGFyYW1ldGVyczogW3N0cmluZ10pOiB7IFtuYW1lOiBzdHJpbmddOiBjZGsuQ2ZuUGFyYW1ldGVyUHJvcHMgfSB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IHJlc3VsdDogeyBbbmFtZTogc3RyaW5nXTogY2RrLkNmblBhcmFtZXRlclByb3BzIH0gPSB7fTtcbiAgZm9yIChjb25zdCBjZGtQYXJhbWV0ZXIgb2YgY2RrUGFyYW1ldGVycykge1xuICAgIGlmICghY2RrUGFyYW1ldGVyLmluY2x1ZGVzKCc9JykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBDREsgcGFyYW1ldGVyICR7Y2RrUGFyYW1ldGVyfS4gSXQgc2hvdWxkIGJlIGluIHRoZSBmb3JtIG9mIG5hbWU9dmFsdWVgKTtcbiAgICB9XG4gICAgY29uc3QgW25hbWUsIHZhbHVlXSA9IGNka1BhcmFtZXRlci5zcGxpdCgnPScpO1xuICAgIGlmICghbmFtZSB8fCAhdmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBDREsgcGFyYW1ldGVyICR7Y2RrUGFyYW1ldGVyfS4gSXQgc2hvdWxkIGJlIGluIHRoZSBmb3JtIG9mIG5hbWU9dmFsdWVgKTtcbiAgICB9XG4gICAgcmVzdWx0W25hbWVdID0ge1xuICAgICAgdHlwZTogJ1N0cmluZycsXG4gICAgICBkZWZhdWx0OiB2YWx1ZSxcbiAgICB9O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbiJdfQ==