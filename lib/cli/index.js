#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARCHIVE_NAME = void 0;
const chalk = require("chalk");
const commander_1 = require("commander");
const checkCredentials_1 = require("./checkCredentials");
const createZip_1 = require("./createZip");
const generateCDKDeployerCfnTemplate_1 = require("./generateCDKDeployerCfnTemplate");
const getProjectFiles_1 = require("./getProjectFiles");
const uploadCDKAppZip_1 = require("./uploadCDKAppZip");
exports.ARCHIVE_NAME = 'cdk_app.zip';
async function run() {
    const program = new commander_1.Command()
        .description('A simple tool to make your CDK app deployable through a click to deploy button. \n \n Prerequisite : Export AWS credentials !')
        .option('--github-repo-name <string>', 'Name of the repo example: "aws-samples/aws-cdk-examples"')
        .option('--s3-bucket-name <string>', 'S3 bucket to use to upload the CDK Deployer stack and potentially the zip file')
        .option('--s3-key-prefix <string>', 'S3 key prefix to use to upload the CDK Deployer stack and potentially the zip file')
        .option('--s3-bucket-region <string>', 'S3 bucket region to use to upload the CDK Deployer stack and potentially the zip file', 'us-east-1')
        .option('--public-read', 'Make the S3 bucket public read', false)
        .option('--github-repo-branch <string>', 'Branch to use', 'main')
        .option('--cdk-project-path <string>', 'Path to the cdk app', './')
        .option('--stack-name <string>', 'Name of the stack to deploy')
        .parse();
    // .option('--cdk-parameters [{<string>:<string>}]', 'CDK parameters to pass to the CDK app. Needs to be provided as an array of tuple, the key being the parmater name and value the parameter value');
    const options = program.opts();
    try {
        await checkCredentials_1.checkGenericAWSCredentials();
        if (!options.githubRepoName && options.s3BucketName && options.s3KeyPrefix) {
            console.log('No github repo name provided for the CDK app to deploy. Will then try to upload it as a zip file');
            console.log(chalk.white('Creating zip file for CDK app ...'));
            const files = getProjectFiles_1.getProjectFiles(options.cdkProjectPath);
            const isCDKAppRoot = files.find((f) => f === 'cdk.json');
            if (!isCDKAppRoot) {
                throw new Error(`No cdk.json file found running \`git ls-files\` in project located at ${process.cwd()}: \n\n did you add your cdk code to git ? are you sure you are on the root of the cdk project ?`);
            }
            await createZip_1.createZip(exports.ARCHIVE_NAME, options.cdkProjectPath, files).catch((e) => {
                throw e;
            });
            await uploadCDKAppZip_1.uploadCDKAppZip(options);
        }
        console.log(chalk.white('Generating the deployer stack ...'));
        const link = await generateCDKDeployerCfnTemplate_1.generateCDKStandaloneDeployerCfnTemplate(options);
        console.info(chalk.green.bold(`You can now add the following markdown to your README.md : [![click-to-deploy](https://img.shields.io/badge/Click%20to-CDK%20Deploy-blue)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=cdkDeployer&templateURL=${link})`));
    }
    catch (error) {
        console.error(chalk.red.bold(error.message));
        process.exit(1);
    }
}
void run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSwrQkFBK0I7QUFDL0IseUNBQW9DO0FBQ3BDLHlEQUFnRTtBQUNoRSwyQ0FBd0M7QUFDeEMscUZBQTRGO0FBQzVGLHVEQUFvRDtBQUNwRCx1REFBb0Q7QUFFdkMsUUFBQSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBRTFDLEtBQUssVUFBVSxHQUFHO0lBQ2hCLE1BQU0sT0FBTyxHQUFHLElBQUksbUJBQU8sRUFBRTtTQUMxQixXQUFXLENBQ1YsK0hBQStILENBQ2hJO1NBQ0EsTUFBTSxDQUFDLDZCQUE2QixFQUFFLDBEQUEwRCxDQUFDO1NBQ2pHLE1BQU0sQ0FDTCwyQkFBMkIsRUFDM0IsZ0ZBQWdGLENBQ2pGO1NBQ0EsTUFBTSxDQUNMLDBCQUEwQixFQUMxQixvRkFBb0YsQ0FDckY7U0FDQSxNQUFNLENBQ0wsNkJBQTZCLEVBQzdCLHVGQUF1RixFQUN2RixXQUFXLENBQ1o7U0FDQSxNQUFNLENBQUMsZUFBZSxFQUFFLGdDQUFnQyxFQUFFLEtBQUssQ0FBQztTQUNoRSxNQUFNLENBQUMsK0JBQStCLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQztTQUNoRSxNQUFNLENBQUMsNkJBQTZCLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxDQUFDO1NBQ2xFLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSw2QkFBNkIsQ0FBQztTQUM5RCxLQUFLLEVBQUUsQ0FBQztJQUNYLHdNQUF3TTtJQUV4TSxNQUFNLE9BQU8sR0FTVCxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkIsSUFBSTtRQUNGLE1BQU0sNkNBQTBCLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDMUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrR0FBa0csQ0FBQyxDQUFDO1lBRWhILE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7WUFFOUQsTUFBTSxLQUFLLEdBQUcsaUNBQWUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdEQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBRXpELElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQ2IseUVBQXlFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsaUdBQWlHLENBQ3hMLENBQUM7YUFDSDtZQUVELE1BQU0scUJBQVMsQ0FBQyxvQkFBWSxFQUFFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZFLE1BQU0sQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLGlDQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDaEM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sSUFBSSxHQUFHLE1BQU0seUVBQXdDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckUsT0FBTyxDQUFDLElBQUksQ0FDVixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDZCwrT0FBK08sSUFBSSxHQUFHLENBQ3ZQLENBQ0YsQ0FBQztLQUNIO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBRUQsS0FBSyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuaW1wb3J0ICogYXMgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgeyBjaGVja0dlbmVyaWNBV1NDcmVkZW50aWFscyB9IGZyb20gJy4vY2hlY2tDcmVkZW50aWFscyc7XG5pbXBvcnQgeyBjcmVhdGVaaXAgfSBmcm9tICcuL2NyZWF0ZVppcCc7XG5pbXBvcnQgeyBnZW5lcmF0ZUNES1N0YW5kYWxvbmVEZXBsb3llckNmblRlbXBsYXRlIH0gZnJvbSAnLi9nZW5lcmF0ZUNES0RlcGxveWVyQ2ZuVGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJvamVjdEZpbGVzIH0gZnJvbSAnLi9nZXRQcm9qZWN0RmlsZXMnO1xuaW1wb3J0IHsgdXBsb2FkQ0RLQXBwWmlwIH0gZnJvbSAnLi91cGxvYWRDREtBcHBaaXAnO1xuXG5leHBvcnQgY29uc3QgQVJDSElWRV9OQU1FID0gJ2Nka19hcHAuemlwJztcblxuYXN5bmMgZnVuY3Rpb24gcnVuKCkge1xuICBjb25zdCBwcm9ncmFtID0gbmV3IENvbW1hbmQoKVxuICAgIC5kZXNjcmlwdGlvbihcbiAgICAgICdBIHNpbXBsZSB0b29sIHRvIG1ha2UgeW91ciBDREsgYXBwIGRlcGxveWFibGUgdGhyb3VnaCBhIGNsaWNrIHRvIGRlcGxveSBidXR0b24uIFxcbiBcXG4gUHJlcmVxdWlzaXRlIDogRXhwb3J0IEFXUyBjcmVkZW50aWFscyAhJyxcbiAgICApXG4gICAgLm9wdGlvbignLS1naXRodWItcmVwby1uYW1lIDxzdHJpbmc+JywgJ05hbWUgb2YgdGhlIHJlcG8gZXhhbXBsZTogXCJhd3Mtc2FtcGxlcy9hd3MtY2RrLWV4YW1wbGVzXCInKVxuICAgIC5vcHRpb24oXG4gICAgICAnLS1zMy1idWNrZXQtbmFtZSA8c3RyaW5nPicsXG4gICAgICAnUzMgYnVja2V0IHRvIHVzZSB0byB1cGxvYWQgdGhlIENESyBEZXBsb3llciBzdGFjayBhbmQgcG90ZW50aWFsbHkgdGhlIHppcCBmaWxlJyxcbiAgICApXG4gICAgLm9wdGlvbihcbiAgICAgICctLXMzLWtleS1wcmVmaXggPHN0cmluZz4nLFxuICAgICAgJ1MzIGtleSBwcmVmaXggdG8gdXNlIHRvIHVwbG9hZCB0aGUgQ0RLIERlcGxveWVyIHN0YWNrIGFuZCBwb3RlbnRpYWxseSB0aGUgemlwIGZpbGUnLFxuICAgIClcbiAgICAub3B0aW9uKFxuICAgICAgJy0tczMtYnVja2V0LXJlZ2lvbiA8c3RyaW5nPicsXG4gICAgICAnUzMgYnVja2V0IHJlZ2lvbiB0byB1c2UgdG8gdXBsb2FkIHRoZSBDREsgRGVwbG95ZXIgc3RhY2sgYW5kIHBvdGVudGlhbGx5IHRoZSB6aXAgZmlsZScsXG4gICAgICAndXMtZWFzdC0xJyxcbiAgICApXG4gICAgLm9wdGlvbignLS1wdWJsaWMtcmVhZCcsICdNYWtlIHRoZSBTMyBidWNrZXQgcHVibGljIHJlYWQnLCBmYWxzZSlcbiAgICAub3B0aW9uKCctLWdpdGh1Yi1yZXBvLWJyYW5jaCA8c3RyaW5nPicsICdCcmFuY2ggdG8gdXNlJywgJ21haW4nKVxuICAgIC5vcHRpb24oJy0tY2RrLXByb2plY3QtcGF0aCA8c3RyaW5nPicsICdQYXRoIHRvIHRoZSBjZGsgYXBwJywgJy4vJylcbiAgICAub3B0aW9uKCctLXN0YWNrLW5hbWUgPHN0cmluZz4nLCAnTmFtZSBvZiB0aGUgc3RhY2sgdG8gZGVwbG95JylcbiAgICAucGFyc2UoKTtcbiAgLy8gLm9wdGlvbignLS1jZGstcGFyYW1ldGVycyBbezxzdHJpbmc+OjxzdHJpbmc+fV0nLCAnQ0RLIHBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgQ0RLIGFwcC4gTmVlZHMgdG8gYmUgcHJvdmlkZWQgYXMgYW4gYXJyYXkgb2YgdHVwbGUsIHRoZSBrZXkgYmVpbmcgdGhlIHBhcm1hdGVyIG5hbWUgYW5kIHZhbHVlIHRoZSBwYXJhbWV0ZXIgdmFsdWUnKTtcblxuICBjb25zdCBvcHRpb25zOiB7XG4gICAgZ2l0aHViUmVwb05hbWU6IHN0cmluZztcbiAgICBzM0J1Y2tldE5hbWU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgczNLZXlQcmVmaXg/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgczNCdWNrZXRSZWdpb246IHN0cmluZztcbiAgICBwdWJsaWNSZWFkOiBib29sZWFuO1xuICAgIGdpdGh1YlJlcG9CcmFuY2g6IHN0cmluZztcbiAgICBjZGtQcm9qZWN0UGF0aDogc3RyaW5nO1xuICAgIHN0YWNrTmFtZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgfSA9IHByb2dyYW0ub3B0cygpO1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgY2hlY2tHZW5lcmljQVdTQ3JlZGVudGlhbHMoKTtcblxuICAgIGlmICghb3B0aW9ucy5naXRodWJSZXBvTmFtZSAmJiBvcHRpb25zLnMzQnVja2V0TmFtZSAmJiBvcHRpb25zLnMzS2V5UHJlZml4KSB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gZ2l0aHViIHJlcG8gbmFtZSBwcm92aWRlZCBmb3IgdGhlIENESyBhcHAgdG8gZGVwbG95LiBXaWxsIHRoZW4gdHJ5IHRvIHVwbG9hZCBpdCBhcyBhIHppcCBmaWxlJyk7XG5cbiAgICAgIGNvbnNvbGUubG9nKGNoYWxrLndoaXRlKCdDcmVhdGluZyB6aXAgZmlsZSBmb3IgQ0RLIGFwcCAuLi4nKSk7XG5cbiAgICAgIGNvbnN0IGZpbGVzID0gZ2V0UHJvamVjdEZpbGVzKG9wdGlvbnMuY2RrUHJvamVjdFBhdGgpO1xuXG4gICAgICBjb25zdCBpc0NES0FwcFJvb3QgPSBmaWxlcy5maW5kKChmKSA9PiBmID09PSAnY2RrLmpzb24nKTtcblxuICAgICAgaWYgKCFpc0NES0FwcFJvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBObyBjZGsuanNvbiBmaWxlIGZvdW5kIHJ1bm5pbmcgXFxgZ2l0IGxzLWZpbGVzXFxgIGluIHByb2plY3QgbG9jYXRlZCBhdCAke3Byb2Nlc3MuY3dkKCl9OiBcXG5cXG4gZGlkIHlvdSBhZGQgeW91ciBjZGsgY29kZSB0byBnaXQgPyBhcmUgeW91IHN1cmUgeW91IGFyZSBvbiB0aGUgcm9vdCBvZiB0aGUgY2RrIHByb2plY3QgP2BcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgY3JlYXRlWmlwKEFSQ0hJVkVfTkFNRSwgb3B0aW9ucy5jZGtQcm9qZWN0UGF0aCwgZmlsZXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHVwbG9hZENES0FwcFppcChvcHRpb25zKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhjaGFsay53aGl0ZSgnR2VuZXJhdGluZyB0aGUgZGVwbG95ZXIgc3RhY2sgLi4uJykpO1xuICAgIGNvbnN0IGxpbmsgPSBhd2FpdCBnZW5lcmF0ZUNES1N0YW5kYWxvbmVEZXBsb3llckNmblRlbXBsYXRlKG9wdGlvbnMpO1xuICAgIGNvbnNvbGUuaW5mbyhcbiAgICAgIGNoYWxrLmdyZWVuLmJvbGQoXG4gICAgICAgIGBZb3UgY2FuIG5vdyBhZGQgdGhlIGZvbGxvd2luZyBtYXJrZG93biB0byB5b3VyIFJFQURNRS5tZCA6IFshW2NsaWNrLXRvLWRlcGxveV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9DbGljayUyMHRvLUNESyUyMERlcGxveS1ibHVlKV0oaHR0cHM6Ly9jb25zb2xlLmF3cy5hbWF6b24uY29tL2Nsb3VkZm9ybWF0aW9uL2hvbWUjL3N0YWNrcy9uZXc/c3RhY2tOYW1lPWNka0RlcGxveWVyJnRlbXBsYXRlVVJMPSR7bGlua30pYCxcbiAgICAgICksXG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZC5ib2xkKChlcnJvciBhcyBFcnJvcikubWVzc2FnZSkpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxufVxuXG52b2lkIHJ1bigpO1xuIl19