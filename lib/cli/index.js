#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARCHIVE_NAME = void 0;
const chalk = require("chalk");
const commander_1 = require("commander");
const checkCredentials_1 = require("./checkCredentials");
const createZip_1 = require("./createZip");
const generateCDKDeployerCfnTemplate_1 = require("./generateCDKDeployerCfnTemplate");
const getProjectFiles_1 = require("./getProjectFiles");
const uploadCDKAppZip_1 = require("./uploadCDKAppZip");
exports.ARCHIVE_NAME = 'cdk_app.zip';
async function run() {
    const program = new commander_1.Command()
        .description('A simple tool to make your CDK app deployable through a click to deploy button. \n \n Prerequisite : Export AWS credentials !')
        .option('--github-repo-name <string>', 'Name of the repo example: "aws-samples/aws-cdk-examples"')
        .option('--s3-bucket-name <string>', 'S3 bucket to use to upload the CDK Deployer stack and potentially the zip file. If not provided, one will be created for you after approval.')
        .option('--s3-key-prefix <string>', 'S3 key prefix to use to upload the CDK Deployer stack and potentially the zip file', '')
        .option('--s3-bucket-region <string>', 'S3 bucket region to use to upload the CDK Deployer stack and potentially the zip file', 'us-east-1')
        .option('--public-read', 'Make the S3 bucket public read', false)
        .option('--github-repo-branch <string>', 'Branch to use', 'main')
        .option('--cdk-project-path <string>', 'Path to the cdk app', './')
        .option('--stack-name <string>', 'Name of the stack to deploy')
        .option('--deploy-buildspec-name <string>', 'Name of the buildspec available in the cdk app to deploy the stack. (Required if --destroy-buildspec-name is provided)')
        .option('--destroy-buildspec-name <string>', 'Name of the buildspec available in the cdk app to destroy the stack. (Required if --deploy-buildspec-name is provided)')
        .option('--install-command <string>', 'Command to run to install dependencies')
        .option('--build-command <string>', 'Command to run to build the cdk app')
        .option('--bootstrap-command <string>', 'Command to run to build the cdk app', 'npx cdk bootstrap')
        .option('--deploy-command <string>', 'Command to run to deploy the cdk app', 'npx cdk deploy --all --require-approval never')
        .option('--destroy-command <string>', 'Command to run to destroy the cdk app', 'npx cdk destroy --all --force')
        .parse();
    // .option('--cdk-parameters [{<string>:<string>}]', 'CDK parameters to pass to the CDK app. Needs to be provided as an array of tuple, the key being the parmater name and value the parameter value');
    const options = program.opts();
    try {
        await checkCredentials_1.checkGenericAWSCredentials();
        if (!options.githubRepoName && options.s3BucketName && options.s3KeyPrefix) {
            console.log('No github repo name provided for the CDK app to deploy. Will then try to upload it as a zip file');
            console.log(chalk.white('Creating zip file for CDK app ...'));
            const files = getProjectFiles_1.getProjectFiles(options.cdkProjectPath);
            const isCDKAppRoot = files.find((f) => f === 'cdk.json');
            if (!isCDKAppRoot) {
                throw new Error(`No cdk.json file found running \`git ls-files\` in project located at ${process.cwd()}: \n\n did you add your cdk code to git ? are you sure you are on the root of the cdk project ?`);
            }
            await createZip_1.createZip(exports.ARCHIVE_NAME, options.cdkProjectPath, files).catch((e) => {
                throw e;
            });
            await uploadCDKAppZip_1.uploadCDKAppZip(options);
        }
        console.log(chalk.white('Generating the deployer stack ...'));
        const link = await generateCDKDeployerCfnTemplate_1.generateCDKStandaloneDeployerCfnTemplate(options);
        console.info(chalk.green.bold(`You can now add the following markdown to your README.md : [![click-to-deploy](https://img.shields.io/badge/Click%20to-CDK%20Deploy-blue)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=cdkDeployer&templateURL=${link})`));
    }
    catch (error) {
        console.error(chalk.red.bold(error.message));
        process.exit(1);
    }
}
void run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSwrQkFBK0I7QUFDL0IseUNBQW9DO0FBQ3BDLHlEQUFnRTtBQUNoRSwyQ0FBd0M7QUFDeEMscUZBQTRGO0FBQzVGLHVEQUFvRDtBQUNwRCx1REFBb0Q7QUFFdkMsUUFBQSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBb0IxQyxLQUFLLFVBQVUsR0FBRztJQUNoQixNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFPLEVBQUU7U0FDMUIsV0FBVyxDQUNWLCtIQUErSCxDQUNoSTtTQUNBLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRSwwREFBMEQsQ0FBQztTQUNqRyxNQUFNLENBQ0wsMkJBQTJCLEVBQzNCLDhJQUE4SSxDQUMvSTtTQUNBLE1BQU0sQ0FDTCwwQkFBMEIsRUFDMUIsb0ZBQW9GLEVBQUUsRUFBRSxDQUN6RjtTQUNBLE1BQU0sQ0FDTCw2QkFBNkIsRUFDN0IsdUZBQXVGLEVBQ3ZGLFdBQVcsQ0FDWjtTQUNBLE1BQU0sQ0FBQyxlQUFlLEVBQUUsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDO1NBQ2hFLE1BQU0sQ0FBQywrQkFBK0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDO1NBQ2hFLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLENBQUM7U0FDbEUsTUFBTSxDQUFDLHVCQUF1QixFQUFFLDZCQUE2QixDQUFDO1NBQzlELE1BQU0sQ0FBQyxrQ0FBa0MsRUFBRSx3SEFBd0gsQ0FBQztTQUNwSyxNQUFNLENBQUMsbUNBQW1DLEVBQUUsd0hBQXdILENBQUM7U0FDckssTUFBTSxDQUFDLDRCQUE0QixFQUFFLHdDQUF3QyxDQUFDO1NBQzlFLE1BQU0sQ0FBQywwQkFBMEIsRUFBRSxxQ0FBcUMsQ0FBQztTQUN6RSxNQUFNLENBQUMsOEJBQThCLEVBQUUscUNBQXFDLEVBQUUsbUJBQW1CLENBQUM7U0FDbEcsTUFBTSxDQUFDLDJCQUEyQixFQUFFLHNDQUFzQyxFQUFFLCtDQUErQyxDQUFDO1NBQzVILE1BQU0sQ0FBQyw0QkFBNEIsRUFBRSx1Q0FBdUMsRUFBRSwrQkFBK0IsQ0FBQztTQUM5RyxLQUFLLEVBQUUsQ0FBQztJQUNYLHdNQUF3TTtJQUV4TSxNQUFNLE9BQU8sR0FBZSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFM0MsSUFBSTtRQUNGLE1BQU0sNkNBQTBCLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDMUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrR0FBa0csQ0FBQyxDQUFDO1lBRWhILE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7WUFFOUQsTUFBTSxLQUFLLEdBQUcsaUNBQWUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdEQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBRXpELElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQ2IseUVBQXlFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsaUdBQWlHLENBQ3hMLENBQUM7YUFDSDtZQUVELE1BQU0scUJBQVMsQ0FBQyxvQkFBWSxFQUFFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZFLE1BQU0sQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLGlDQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDaEM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sSUFBSSxHQUFHLE1BQU0seUVBQXdDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckUsT0FBTyxDQUFDLElBQUksQ0FDVixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDZCwrT0FBK08sSUFBSSxHQUFHLENBQ3ZQLENBQ0YsQ0FBQztLQUNIO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBRUQsS0FBSyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuaW1wb3J0ICogYXMgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgeyBjaGVja0dlbmVyaWNBV1NDcmVkZW50aWFscyB9IGZyb20gJy4vY2hlY2tDcmVkZW50aWFscyc7XG5pbXBvcnQgeyBjcmVhdGVaaXAgfSBmcm9tICcuL2NyZWF0ZVppcCc7XG5pbXBvcnQgeyBnZW5lcmF0ZUNES1N0YW5kYWxvbmVEZXBsb3llckNmblRlbXBsYXRlIH0gZnJvbSAnLi9nZW5lcmF0ZUNES0RlcGxveWVyQ2ZuVGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJvamVjdEZpbGVzIH0gZnJvbSAnLi9nZXRQcm9qZWN0RmlsZXMnO1xuaW1wb3J0IHsgdXBsb2FkQ0RLQXBwWmlwIH0gZnJvbSAnLi91cGxvYWRDREtBcHBaaXAnO1xuXG5leHBvcnQgY29uc3QgQVJDSElWRV9OQU1FID0gJ2Nka19hcHAuemlwJztcblxuZXhwb3J0IHR5cGUgQ0xJT3B0aW9ucyA9IHtcbiAgZ2l0aHViUmVwb05hbWU6IHN0cmluZztcbiAgczNCdWNrZXROYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBzM0tleVByZWZpeD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgczNCdWNrZXRSZWdpb246IHN0cmluZztcbiAgcHVibGljUmVhZDogYm9vbGVhbjtcbiAgZ2l0aHViUmVwb0JyYW5jaDogc3RyaW5nO1xuICBjZGtQcm9qZWN0UGF0aDogc3RyaW5nO1xuICBzdGFja05hbWU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGRlcGxveUJ1aWxkc3BlY05hbWU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGRlc3Ryb3lCdWlsZHNwZWNOYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBpbnN0YWxsQ29tbWFuZD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgYnVpbGRDb21tYW5kPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBkZXBsb3lDb21tYW5kPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBkZXN0cm95Q29tbWFuZD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgYm9vdHN0cmFwQ29tbWFuZD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgY29uc3QgcHJvZ3JhbSA9IG5ldyBDb21tYW5kKClcbiAgICAuZGVzY3JpcHRpb24oXG4gICAgICAnQSBzaW1wbGUgdG9vbCB0byBtYWtlIHlvdXIgQ0RLIGFwcCBkZXBsb3lhYmxlIHRocm91Z2ggYSBjbGljayB0byBkZXBsb3kgYnV0dG9uLiBcXG4gXFxuIFByZXJlcXVpc2l0ZSA6IEV4cG9ydCBBV1MgY3JlZGVudGlhbHMgIScsXG4gICAgKVxuICAgIC5vcHRpb24oJy0tZ2l0aHViLXJlcG8tbmFtZSA8c3RyaW5nPicsICdOYW1lIG9mIHRoZSByZXBvIGV4YW1wbGU6IFwiYXdzLXNhbXBsZXMvYXdzLWNkay1leGFtcGxlc1wiJylcbiAgICAub3B0aW9uKFxuICAgICAgJy0tczMtYnVja2V0LW5hbWUgPHN0cmluZz4nLFxuICAgICAgJ1MzIGJ1Y2tldCB0byB1c2UgdG8gdXBsb2FkIHRoZSBDREsgRGVwbG95ZXIgc3RhY2sgYW5kIHBvdGVudGlhbGx5IHRoZSB6aXAgZmlsZS4gSWYgbm90IHByb3ZpZGVkLCBvbmUgd2lsbCBiZSBjcmVhdGVkIGZvciB5b3UgYWZ0ZXIgYXBwcm92YWwuJyxcbiAgICApXG4gICAgLm9wdGlvbihcbiAgICAgICctLXMzLWtleS1wcmVmaXggPHN0cmluZz4nLFxuICAgICAgJ1MzIGtleSBwcmVmaXggdG8gdXNlIHRvIHVwbG9hZCB0aGUgQ0RLIERlcGxveWVyIHN0YWNrIGFuZCBwb3RlbnRpYWxseSB0aGUgemlwIGZpbGUnLCAnJyxcbiAgICApXG4gICAgLm9wdGlvbihcbiAgICAgICctLXMzLWJ1Y2tldC1yZWdpb24gPHN0cmluZz4nLFxuICAgICAgJ1MzIGJ1Y2tldCByZWdpb24gdG8gdXNlIHRvIHVwbG9hZCB0aGUgQ0RLIERlcGxveWVyIHN0YWNrIGFuZCBwb3RlbnRpYWxseSB0aGUgemlwIGZpbGUnLFxuICAgICAgJ3VzLWVhc3QtMScsXG4gICAgKVxuICAgIC5vcHRpb24oJy0tcHVibGljLXJlYWQnLCAnTWFrZSB0aGUgUzMgYnVja2V0IHB1YmxpYyByZWFkJywgZmFsc2UpXG4gICAgLm9wdGlvbignLS1naXRodWItcmVwby1icmFuY2ggPHN0cmluZz4nLCAnQnJhbmNoIHRvIHVzZScsICdtYWluJylcbiAgICAub3B0aW9uKCctLWNkay1wcm9qZWN0LXBhdGggPHN0cmluZz4nLCAnUGF0aCB0byB0aGUgY2RrIGFwcCcsICcuLycpXG4gICAgLm9wdGlvbignLS1zdGFjay1uYW1lIDxzdHJpbmc+JywgJ05hbWUgb2YgdGhlIHN0YWNrIHRvIGRlcGxveScpXG4gICAgLm9wdGlvbignLS1kZXBsb3ktYnVpbGRzcGVjLW5hbWUgPHN0cmluZz4nLCAnTmFtZSBvZiB0aGUgYnVpbGRzcGVjIGF2YWlsYWJsZSBpbiB0aGUgY2RrIGFwcCB0byBkZXBsb3kgdGhlIHN0YWNrLiAoUmVxdWlyZWQgaWYgLS1kZXN0cm95LWJ1aWxkc3BlYy1uYW1lIGlzIHByb3ZpZGVkKScpXG4gICAgLm9wdGlvbignLS1kZXN0cm95LWJ1aWxkc3BlYy1uYW1lIDxzdHJpbmc+JywgJ05hbWUgb2YgdGhlIGJ1aWxkc3BlYyBhdmFpbGFibGUgaW4gdGhlIGNkayBhcHAgdG8gZGVzdHJveSB0aGUgc3RhY2suIChSZXF1aXJlZCBpZiAtLWRlcGxveS1idWlsZHNwZWMtbmFtZSBpcyBwcm92aWRlZCknKVxuICAgIC5vcHRpb24oJy0taW5zdGFsbC1jb21tYW5kIDxzdHJpbmc+JywgJ0NvbW1hbmQgdG8gcnVuIHRvIGluc3RhbGwgZGVwZW5kZW5jaWVzJylcbiAgICAub3B0aW9uKCctLWJ1aWxkLWNvbW1hbmQgPHN0cmluZz4nLCAnQ29tbWFuZCB0byBydW4gdG8gYnVpbGQgdGhlIGNkayBhcHAnKVxuICAgIC5vcHRpb24oJy0tYm9vdHN0cmFwLWNvbW1hbmQgPHN0cmluZz4nLCAnQ29tbWFuZCB0byBydW4gdG8gYnVpbGQgdGhlIGNkayBhcHAnLCAnbnB4IGNkayBib290c3RyYXAnKVxuICAgIC5vcHRpb24oJy0tZGVwbG95LWNvbW1hbmQgPHN0cmluZz4nLCAnQ29tbWFuZCB0byBydW4gdG8gZGVwbG95IHRoZSBjZGsgYXBwJywgJ25weCBjZGsgZGVwbG95IC0tYWxsIC0tcmVxdWlyZS1hcHByb3ZhbCBuZXZlcicpXG4gICAgLm9wdGlvbignLS1kZXN0cm95LWNvbW1hbmQgPHN0cmluZz4nLCAnQ29tbWFuZCB0byBydW4gdG8gZGVzdHJveSB0aGUgY2RrIGFwcCcsICducHggY2RrIGRlc3Ryb3kgLS1hbGwgLS1mb3JjZScpXG4gICAgLnBhcnNlKCk7XG4gIC8vIC5vcHRpb24oJy0tY2RrLXBhcmFtZXRlcnMgW3s8c3RyaW5nPjo8c3RyaW5nPn1dJywgJ0NESyBwYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIENESyBhcHAuIE5lZWRzIHRvIGJlIHByb3ZpZGVkIGFzIGFuIGFycmF5IG9mIHR1cGxlLCB0aGUga2V5IGJlaW5nIHRoZSBwYXJtYXRlciBuYW1lIGFuZCB2YWx1ZSB0aGUgcGFyYW1ldGVyIHZhbHVlJyk7XG5cbiAgY29uc3Qgb3B0aW9uczogQ0xJT3B0aW9ucyA9IHByb2dyYW0ub3B0cygpO1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgY2hlY2tHZW5lcmljQVdTQ3JlZGVudGlhbHMoKTtcblxuICAgIGlmICghb3B0aW9ucy5naXRodWJSZXBvTmFtZSAmJiBvcHRpb25zLnMzQnVja2V0TmFtZSAmJiBvcHRpb25zLnMzS2V5UHJlZml4KSB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gZ2l0aHViIHJlcG8gbmFtZSBwcm92aWRlZCBmb3IgdGhlIENESyBhcHAgdG8gZGVwbG95LiBXaWxsIHRoZW4gdHJ5IHRvIHVwbG9hZCBpdCBhcyBhIHppcCBmaWxlJyk7XG5cbiAgICAgIGNvbnNvbGUubG9nKGNoYWxrLndoaXRlKCdDcmVhdGluZyB6aXAgZmlsZSBmb3IgQ0RLIGFwcCAuLi4nKSk7XG5cbiAgICAgIGNvbnN0IGZpbGVzID0gZ2V0UHJvamVjdEZpbGVzKG9wdGlvbnMuY2RrUHJvamVjdFBhdGgpO1xuXG4gICAgICBjb25zdCBpc0NES0FwcFJvb3QgPSBmaWxlcy5maW5kKChmKSA9PiBmID09PSAnY2RrLmpzb24nKTtcblxuICAgICAgaWYgKCFpc0NES0FwcFJvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBObyBjZGsuanNvbiBmaWxlIGZvdW5kIHJ1bm5pbmcgXFxgZ2l0IGxzLWZpbGVzXFxgIGluIHByb2plY3QgbG9jYXRlZCBhdCAke3Byb2Nlc3MuY3dkKCl9OiBcXG5cXG4gZGlkIHlvdSBhZGQgeW91ciBjZGsgY29kZSB0byBnaXQgPyBhcmUgeW91IHN1cmUgeW91IGFyZSBvbiB0aGUgcm9vdCBvZiB0aGUgY2RrIHByb2plY3QgP2BcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgY3JlYXRlWmlwKEFSQ0hJVkVfTkFNRSwgb3B0aW9ucy5jZGtQcm9qZWN0UGF0aCwgZmlsZXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHVwbG9hZENES0FwcFppcChvcHRpb25zKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhjaGFsay53aGl0ZSgnR2VuZXJhdGluZyB0aGUgZGVwbG95ZXIgc3RhY2sgLi4uJykpO1xuICAgIGNvbnN0IGxpbmsgPSBhd2FpdCBnZW5lcmF0ZUNES1N0YW5kYWxvbmVEZXBsb3llckNmblRlbXBsYXRlKG9wdGlvbnMpO1xuICAgIGNvbnNvbGUuaW5mbyhcbiAgICAgIGNoYWxrLmdyZWVuLmJvbGQoXG4gICAgICAgIGBZb3UgY2FuIG5vdyBhZGQgdGhlIGZvbGxvd2luZyBtYXJrZG93biB0byB5b3VyIFJFQURNRS5tZCA6IFshW2NsaWNrLXRvLWRlcGxveV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9DbGljayUyMHRvLUNESyUyMERlcGxveS1ibHVlKV0oaHR0cHM6Ly9jb25zb2xlLmF3cy5hbWF6b24uY29tL2Nsb3VkZm9ybWF0aW9uL2hvbWUjL3N0YWNrcy9uZXc/c3RhY2tOYW1lPWNka0RlcGxveWVyJnRlbXBsYXRlVVJMPSR7bGlua30pYCxcbiAgICAgICksXG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZC5ib2xkKChlcnJvciBhcyBFcnJvcikubWVzc2FnZSkpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxufVxuXG52b2lkIHJ1bigpO1xuIl19