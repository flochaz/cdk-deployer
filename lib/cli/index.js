#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARCHIVE_NAME = void 0;
const chalk = require("chalk");
const commander_1 = require("commander");
const checkCredentials_1 = require("./checkCredentials");
const createZip_1 = require("./createZip");
const generateCDKDeployerCfnTemplate_1 = require("./generateCDKDeployerCfnTemplate");
const getProjectFiles_1 = require("./getProjectFiles");
const uploadCDKAppZip_1 = require("./uploadCDKAppZip");
exports.ARCHIVE_NAME = 'cdk_app.zip';
async function run() {
    const program = new commander_1.Command()
        .description('A simple tool to make your CDK app deployable through a click to deploy button. \n \n Prerequisite : Export AWS credentials !')
        .option('--github-repo-name <string>', 'Name of the repo example: "aws-samples/aws-cdk-examples"')
        .option('--s3-bucket-name <string>', 'S3 bucket to use to upload the CDK Deployer stack and potentially the zip file')
        .option('--s3-key-prefix <string>', 'S3 key prefix to use to upload the CDK Deployer stack and potentially the zip file')
        .option('--s3-bucket-region <string>', 'S3 bucket region to use to upload the CDK Deployer stack and potentially the zip file', 'us-east-1')
        .option('--public-read', 'Make the S3 bucket public read', false)
        .option('--github-repo-branch <string>', 'Branch to use', 'main')
        .option('--cdk-project-path <string>', 'Path to the cdk app', './')
        .option('--stack-name <string>', 'Name of the stack to deploy')
        .parse();
    // .option('--cdk-parameters [{<string>:<string>}]', 'CDK parameters to pass to the CDK app. Needs to be provided as an array of tuple, the key being the parmater name and value the parameter value');
    const options = program.opts();
    try {
        await checkCredentials_1.checkGenericAWSCredentials();
        if (!options.githubRepoName && options.s3BucketName && options.s3KeyPrefix) {
            console.log('No github repo name provided for the CDK app to deploy. Will then try to upload it as a zip file');
            console.log(chalk.white('Creating zip file for CDK app ...'));
            const files = getProjectFiles_1.getProjectFiles(options.cdkProjectPath);
            const isCDKAppRoot = files.find((f) => f === 'cdk.json');
            if (!isCDKAppRoot) {
                throw new Error(`No cdk.json file found running \`git ls-files\` in project located at ${process.cwd()}: \n\n did you add your cdk code to git ? are you sure you are on the root of the cdk project ?`);
            }
            await createZip_1.createZip(exports.ARCHIVE_NAME, options.cdkProjectPath, files).catch((e) => {
                throw e;
            });
            await uploadCDKAppZip_1.uploadCDKAppZip(options);
        }
        console.log(chalk.white('Generating the deployer stack ...'));
        const link = await generateCDKDeployerCfnTemplate_1.generateCDKDeployerCfnTemplate(options);
        console.info(chalk.green.bold(`You can now add the following markdown to your README.md : https://img.shields.io/badge/Click%20to-CDK%20Deploy-blue)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=cdkDeployer&templateURL=${link})`));
    }
    catch (error) {
        console.error(chalk.red.bold(error.message));
        process.exit(1);
    }
}
void run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSwrQkFBK0I7QUFDL0IseUNBQW9DO0FBQ3BDLHlEQUFnRTtBQUNoRSwyQ0FBd0M7QUFDeEMscUZBQWtGO0FBQ2xGLHVEQUFvRDtBQUNwRCx1REFBb0Q7QUFFdkMsUUFBQSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBRTFDLEtBQUssVUFBVSxHQUFHO0lBQ2hCLE1BQU0sT0FBTyxHQUFHLElBQUksbUJBQU8sRUFBRTtTQUMxQixXQUFXLENBQ1YsK0hBQStILENBQ2hJO1NBQ0EsTUFBTSxDQUFDLDZCQUE2QixFQUFFLDBEQUEwRCxDQUFDO1NBQ2pHLE1BQU0sQ0FDTCwyQkFBMkIsRUFDM0IsZ0ZBQWdGLENBQ2pGO1NBQ0EsTUFBTSxDQUNMLDBCQUEwQixFQUMxQixvRkFBb0YsQ0FDckY7U0FDQSxNQUFNLENBQ0wsNkJBQTZCLEVBQzdCLHVGQUF1RixFQUN2RixXQUFXLENBQ1o7U0FDQSxNQUFNLENBQUMsZUFBZSxFQUFFLGdDQUFnQyxFQUFFLEtBQUssQ0FBQztTQUNoRSxNQUFNLENBQUMsK0JBQStCLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQztTQUNoRSxNQUFNLENBQUMsNkJBQTZCLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxDQUFDO1NBQ2xFLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSw2QkFBNkIsQ0FBQztTQUM5RCxLQUFLLEVBQUUsQ0FBQztJQUNYLHdNQUF3TTtJQUV4TSxNQUFNLE9BQU8sR0FTVCxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkIsSUFBSTtRQUNGLE1BQU0sNkNBQTBCLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDMUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrR0FBa0csQ0FBQyxDQUFDO1lBRWhILE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7WUFFOUQsTUFBTSxLQUFLLEdBQUcsaUNBQWUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdEQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBRXpELElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQ2IseUVBQXlFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsaUdBQWlHLENBQ3hMLENBQUM7YUFDSDtZQUVELE1BQU0scUJBQVMsQ0FBQyxvQkFBWSxFQUFFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZFLE1BQU0sQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLGlDQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDaEM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sSUFBSSxHQUFHLE1BQU0sK0RBQThCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLElBQUksQ0FDVixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDZCwyTkFBMk4sSUFBSSxHQUFHLENBQ25PLENBQ0YsQ0FBQztLQUNIO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDO0FBRUQsS0FBSyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuaW1wb3J0ICogYXMgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgeyBjaGVja0dlbmVyaWNBV1NDcmVkZW50aWFscyB9IGZyb20gJy4vY2hlY2tDcmVkZW50aWFscyc7XG5pbXBvcnQgeyBjcmVhdGVaaXAgfSBmcm9tICcuL2NyZWF0ZVppcCc7XG5pbXBvcnQgeyBnZW5lcmF0ZUNES0RlcGxveWVyQ2ZuVGVtcGxhdGUgfSBmcm9tICcuL2dlbmVyYXRlQ0RLRGVwbG95ZXJDZm5UZW1wbGF0ZSc7XG5pbXBvcnQgeyBnZXRQcm9qZWN0RmlsZXMgfSBmcm9tICcuL2dldFByb2plY3RGaWxlcyc7XG5pbXBvcnQgeyB1cGxvYWRDREtBcHBaaXAgfSBmcm9tICcuL3VwbG9hZENES0FwcFppcCc7XG5cbmV4cG9ydCBjb25zdCBBUkNISVZFX05BTUUgPSAnY2RrX2FwcC56aXAnO1xuXG5hc3luYyBmdW5jdGlvbiBydW4oKSB7XG4gIGNvbnN0IHByb2dyYW0gPSBuZXcgQ29tbWFuZCgpXG4gICAgLmRlc2NyaXB0aW9uKFxuICAgICAgJ0Egc2ltcGxlIHRvb2wgdG8gbWFrZSB5b3VyIENESyBhcHAgZGVwbG95YWJsZSB0aHJvdWdoIGEgY2xpY2sgdG8gZGVwbG95IGJ1dHRvbi4gXFxuIFxcbiBQcmVyZXF1aXNpdGUgOiBFeHBvcnQgQVdTIGNyZWRlbnRpYWxzICEnLFxuICAgIClcbiAgICAub3B0aW9uKCctLWdpdGh1Yi1yZXBvLW5hbWUgPHN0cmluZz4nLCAnTmFtZSBvZiB0aGUgcmVwbyBleGFtcGxlOiBcImF3cy1zYW1wbGVzL2F3cy1jZGstZXhhbXBsZXNcIicpXG4gICAgLm9wdGlvbihcbiAgICAgICctLXMzLWJ1Y2tldC1uYW1lIDxzdHJpbmc+JyxcbiAgICAgICdTMyBidWNrZXQgdG8gdXNlIHRvIHVwbG9hZCB0aGUgQ0RLIERlcGxveWVyIHN0YWNrIGFuZCBwb3RlbnRpYWxseSB0aGUgemlwIGZpbGUnLFxuICAgIClcbiAgICAub3B0aW9uKFxuICAgICAgJy0tczMta2V5LXByZWZpeCA8c3RyaW5nPicsXG4gICAgICAnUzMga2V5IHByZWZpeCB0byB1c2UgdG8gdXBsb2FkIHRoZSBDREsgRGVwbG95ZXIgc3RhY2sgYW5kIHBvdGVudGlhbGx5IHRoZSB6aXAgZmlsZScsXG4gICAgKVxuICAgIC5vcHRpb24oXG4gICAgICAnLS1zMy1idWNrZXQtcmVnaW9uIDxzdHJpbmc+JyxcbiAgICAgICdTMyBidWNrZXQgcmVnaW9uIHRvIHVzZSB0byB1cGxvYWQgdGhlIENESyBEZXBsb3llciBzdGFjayBhbmQgcG90ZW50aWFsbHkgdGhlIHppcCBmaWxlJyxcbiAgICAgICd1cy1lYXN0LTEnLFxuICAgIClcbiAgICAub3B0aW9uKCctLXB1YmxpYy1yZWFkJywgJ01ha2UgdGhlIFMzIGJ1Y2tldCBwdWJsaWMgcmVhZCcsIGZhbHNlKVxuICAgIC5vcHRpb24oJy0tZ2l0aHViLXJlcG8tYnJhbmNoIDxzdHJpbmc+JywgJ0JyYW5jaCB0byB1c2UnLCAnbWFpbicpXG4gICAgLm9wdGlvbignLS1jZGstcHJvamVjdC1wYXRoIDxzdHJpbmc+JywgJ1BhdGggdG8gdGhlIGNkayBhcHAnLCAnLi8nKVxuICAgIC5vcHRpb24oJy0tc3RhY2stbmFtZSA8c3RyaW5nPicsICdOYW1lIG9mIHRoZSBzdGFjayB0byBkZXBsb3knKVxuICAgIC5wYXJzZSgpO1xuICAvLyAub3B0aW9uKCctLWNkay1wYXJhbWV0ZXJzIFt7PHN0cmluZz46PHN0cmluZz59XScsICdDREsgcGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSBDREsgYXBwLiBOZWVkcyB0byBiZSBwcm92aWRlZCBhcyBhbiBhcnJheSBvZiB0dXBsZSwgdGhlIGtleSBiZWluZyB0aGUgcGFybWF0ZXIgbmFtZSBhbmQgdmFsdWUgdGhlIHBhcmFtZXRlciB2YWx1ZScpO1xuXG4gIGNvbnN0IG9wdGlvbnM6IHtcbiAgICBnaXRodWJSZXBvTmFtZTogc3RyaW5nO1xuICAgIHMzQnVja2V0TmFtZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBzM0tleVByZWZpeD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBzM0J1Y2tldFJlZ2lvbjogc3RyaW5nO1xuICAgIHB1YmxpY1JlYWQ6IGJvb2xlYW47XG4gICAgZ2l0aHViUmVwb0JyYW5jaDogc3RyaW5nO1xuICAgIGNka1Byb2plY3RQYXRoOiBzdHJpbmc7XG4gICAgc3RhY2tOYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICB9ID0gcHJvZ3JhbS5vcHRzKCk7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBjaGVja0dlbmVyaWNBV1NDcmVkZW50aWFscygpO1xuXG4gICAgaWYgKCFvcHRpb25zLmdpdGh1YlJlcG9OYW1lICYmIG9wdGlvbnMuczNCdWNrZXROYW1lICYmIG9wdGlvbnMuczNLZXlQcmVmaXgpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdObyBnaXRodWIgcmVwbyBuYW1lIHByb3ZpZGVkIGZvciB0aGUgQ0RLIGFwcCB0byBkZXBsb3kuIFdpbGwgdGhlbiB0cnkgdG8gdXBsb2FkIGl0IGFzIGEgemlwIGZpbGUnKTtcblxuICAgICAgY29uc29sZS5sb2coY2hhbGsud2hpdGUoJ0NyZWF0aW5nIHppcCBmaWxlIGZvciBDREsgYXBwIC4uLicpKTtcblxuICAgICAgY29uc3QgZmlsZXMgPSBnZXRQcm9qZWN0RmlsZXMob3B0aW9ucy5jZGtQcm9qZWN0UGF0aCk7XG5cbiAgICAgIGNvbnN0IGlzQ0RLQXBwUm9vdCA9IGZpbGVzLmZpbmQoKGYpID0+IGYgPT09ICdjZGsuanNvbicpO1xuXG4gICAgICBpZiAoIWlzQ0RLQXBwUm9vdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYE5vIGNkay5qc29uIGZpbGUgZm91bmQgcnVubmluZyBcXGBnaXQgbHMtZmlsZXNcXGAgaW4gcHJvamVjdCBsb2NhdGVkIGF0ICR7cHJvY2Vzcy5jd2QoKX06IFxcblxcbiBkaWQgeW91IGFkZCB5b3VyIGNkayBjb2RlIHRvIGdpdCA/IGFyZSB5b3Ugc3VyZSB5b3UgYXJlIG9uIHRoZSByb290IG9mIHRoZSBjZGsgcHJvamVjdCA/YFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBjcmVhdGVaaXAoQVJDSElWRV9OQU1FLCBvcHRpb25zLmNka1Byb2plY3RQYXRoLCBmaWxlcykuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdXBsb2FkQ0RLQXBwWmlwKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGNoYWxrLndoaXRlKCdHZW5lcmF0aW5nIHRoZSBkZXBsb3llciBzdGFjayAuLi4nKSk7XG4gICAgY29uc3QgbGluayA9IGF3YWl0IGdlbmVyYXRlQ0RLRGVwbG95ZXJDZm5UZW1wbGF0ZShvcHRpb25zKTtcbiAgICBjb25zb2xlLmluZm8oXG4gICAgICBjaGFsay5ncmVlbi5ib2xkKFxuICAgICAgICBgWW91IGNhbiBub3cgYWRkIHRoZSBmb2xsb3dpbmcgbWFya2Rvd24gdG8geW91ciBSRUFETUUubWQgOiBodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL0NsaWNrJTIwdG8tQ0RLJTIwRGVwbG95LWJsdWUpXShodHRwczovL2NvbnNvbGUuYXdzLmFtYXpvbi5jb20vY2xvdWRmb3JtYXRpb24vaG9tZSMvc3RhY2tzL25ldz9zdGFja05hbWU9Y2RrRGVwbG95ZXImdGVtcGxhdGVVUkw9JHtsaW5rfSlgLFxuICAgICAgKSxcbiAgICApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsucmVkLmJvbGQoKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlKSk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG59XG5cbnZvaWQgcnVuKCk7XG4iXX0=